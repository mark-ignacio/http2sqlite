// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mark-ignacio/http2sqlite/ent/httprequest"
)

// HTTPRequest is the model entity for the HTTPRequest schema.
type HTTPRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Received holds the value of the "received" field.
	Received time.Time `json:"received,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Header holds the value of the "header" field.
	Header http.Header `json:"header,omitempty"`
	// Body holds the value of the "body" field.
	Body []byte `json:"body,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HTTPRequest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case httprequest.FieldHeader, httprequest.FieldBody:
			values[i] = new([]byte)
		case httprequest.FieldID:
			values[i] = new(sql.NullInt64)
		case httprequest.FieldHost, httprequest.FieldPath, httprequest.FieldMethod:
			values[i] = new(sql.NullString)
		case httprequest.FieldReceived:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HTTPRequest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HTTPRequest fields.
func (hr *HTTPRequest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case httprequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hr.ID = int(value.Int64)
		case httprequest.FieldReceived:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field received", values[i])
			} else if value.Valid {
				hr.Received = value.Time
			}
		case httprequest.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				hr.Host = value.String
			}
		case httprequest.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				hr.Path = value.String
			}
		case httprequest.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				hr.Method = value.String
			}
		case httprequest.FieldHeader:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field header", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hr.Header); err != nil {
					return fmt.Errorf("unmarshal field header: %w", err)
				}
			}
		case httprequest.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil {
				hr.Body = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this HTTPRequest.
// Note that you need to call HTTPRequest.Unwrap() before calling this method if this HTTPRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HTTPRequest) Update() *HTTPRequestUpdateOne {
	return (&HTTPRequestClient{config: hr.config}).UpdateOne(hr)
}

// Unwrap unwraps the HTTPRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hr *HTTPRequest) Unwrap() *HTTPRequest {
	tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HTTPRequest is not a transactional entity")
	}
	hr.config.driver = tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HTTPRequest) String() string {
	var builder strings.Builder
	builder.WriteString("HTTPRequest(")
	builder.WriteString(fmt.Sprintf("id=%v", hr.ID))
	builder.WriteString(", received=")
	builder.WriteString(hr.Received.Format(time.ANSIC))
	builder.WriteString(", host=")
	builder.WriteString(hr.Host)
	builder.WriteString(", path=")
	builder.WriteString(hr.Path)
	builder.WriteString(", method=")
	builder.WriteString(hr.Method)
	builder.WriteString(", header=")
	builder.WriteString(fmt.Sprintf("%v", hr.Header))
	builder.WriteString(", body=")
	builder.WriteString(fmt.Sprintf("%v", hr.Body))
	builder.WriteByte(')')
	return builder.String()
}

// HTTPRequests is a parsable slice of HTTPRequest.
type HTTPRequests []*HTTPRequest

func (hr HTTPRequests) config(cfg config) {
	for _i := range hr {
		hr[_i].config = cfg
	}
}
