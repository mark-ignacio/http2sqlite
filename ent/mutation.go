// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"sync"
	"time"

	"github.com/mark-ignacio/http2sqlite/ent/httprequest"
	"github.com/mark-ignacio/http2sqlite/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHTTPRequest = "HTTPRequest"
)

// HTTPRequestMutation represents an operation that mutates the HTTPRequest nodes in the graph.
type HTTPRequestMutation struct {
	config
	op            Op
	typ           string
	id            *int
	received      *time.Time
	host          *string
	_path         *string
	method        *string
	header        *http.Header
	body          *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HTTPRequest, error)
	predicates    []predicate.HTTPRequest
}

var _ ent.Mutation = (*HTTPRequestMutation)(nil)

// httprequestOption allows management of the mutation configuration using functional options.
type httprequestOption func(*HTTPRequestMutation)

// newHTTPRequestMutation creates new mutation for the HTTPRequest entity.
func newHTTPRequestMutation(c config, op Op, opts ...httprequestOption) *HTTPRequestMutation {
	m := &HTTPRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeHTTPRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHTTPRequestID sets the ID field of the mutation.
func withHTTPRequestID(id int) httprequestOption {
	return func(m *HTTPRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *HTTPRequest
		)
		m.oldValue = func(ctx context.Context) (*HTTPRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HTTPRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHTTPRequest sets the old HTTPRequest of the mutation.
func withHTTPRequest(node *HTTPRequest) httprequestOption {
	return func(m *HTTPRequestMutation) {
		m.oldValue = func(context.Context) (*HTTPRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HTTPRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HTTPRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HTTPRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HTTPRequestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HTTPRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReceived sets the "received" field.
func (m *HTTPRequestMutation) SetReceived(t time.Time) {
	m.received = &t
}

// Received returns the value of the "received" field in the mutation.
func (m *HTTPRequestMutation) Received() (r time.Time, exists bool) {
	v := m.received
	if v == nil {
		return
	}
	return *v, true
}

// OldReceived returns the old "received" field's value of the HTTPRequest entity.
// If the HTTPRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTTPRequestMutation) OldReceived(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceived is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceived requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceived: %w", err)
	}
	return oldValue.Received, nil
}

// ResetReceived resets all changes to the "received" field.
func (m *HTTPRequestMutation) ResetReceived() {
	m.received = nil
}

// SetHost sets the "host" field.
func (m *HTTPRequestMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *HTTPRequestMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the HTTPRequest entity.
// If the HTTPRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTTPRequestMutation) OldHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ResetHost resets all changes to the "host" field.
func (m *HTTPRequestMutation) ResetHost() {
	m.host = nil
}

// SetPath sets the "path" field.
func (m *HTTPRequestMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *HTTPRequestMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the HTTPRequest entity.
// If the HTTPRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTTPRequestMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *HTTPRequestMutation) ResetPath() {
	m._path = nil
}

// SetMethod sets the "method" field.
func (m *HTTPRequestMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *HTTPRequestMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the HTTPRequest entity.
// If the HTTPRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTTPRequestMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *HTTPRequestMutation) ResetMethod() {
	m.method = nil
}

// SetHeader sets the "header" field.
func (m *HTTPRequestMutation) SetHeader(h http.Header) {
	m.header = &h
}

// Header returns the value of the "header" field in the mutation.
func (m *HTTPRequestMutation) Header() (r http.Header, exists bool) {
	v := m.header
	if v == nil {
		return
	}
	return *v, true
}

// OldHeader returns the old "header" field's value of the HTTPRequest entity.
// If the HTTPRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTTPRequestMutation) OldHeader(ctx context.Context) (v http.Header, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeader: %w", err)
	}
	return oldValue.Header, nil
}

// ResetHeader resets all changes to the "header" field.
func (m *HTTPRequestMutation) ResetHeader() {
	m.header = nil
}

// SetBody sets the "body" field.
func (m *HTTPRequestMutation) SetBody(b []byte) {
	m.body = &b
}

// Body returns the value of the "body" field in the mutation.
func (m *HTTPRequestMutation) Body() (r []byte, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the HTTPRequest entity.
// If the HTTPRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HTTPRequestMutation) OldBody(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *HTTPRequestMutation) ResetBody() {
	m.body = nil
}

// Where appends a list predicates to the HTTPRequestMutation builder.
func (m *HTTPRequestMutation) Where(ps ...predicate.HTTPRequest) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HTTPRequestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HTTPRequest).
func (m *HTTPRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HTTPRequestMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.received != nil {
		fields = append(fields, httprequest.FieldReceived)
	}
	if m.host != nil {
		fields = append(fields, httprequest.FieldHost)
	}
	if m._path != nil {
		fields = append(fields, httprequest.FieldPath)
	}
	if m.method != nil {
		fields = append(fields, httprequest.FieldMethod)
	}
	if m.header != nil {
		fields = append(fields, httprequest.FieldHeader)
	}
	if m.body != nil {
		fields = append(fields, httprequest.FieldBody)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HTTPRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case httprequest.FieldReceived:
		return m.Received()
	case httprequest.FieldHost:
		return m.Host()
	case httprequest.FieldPath:
		return m.Path()
	case httprequest.FieldMethod:
		return m.Method()
	case httprequest.FieldHeader:
		return m.Header()
	case httprequest.FieldBody:
		return m.Body()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HTTPRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case httprequest.FieldReceived:
		return m.OldReceived(ctx)
	case httprequest.FieldHost:
		return m.OldHost(ctx)
	case httprequest.FieldPath:
		return m.OldPath(ctx)
	case httprequest.FieldMethod:
		return m.OldMethod(ctx)
	case httprequest.FieldHeader:
		return m.OldHeader(ctx)
	case httprequest.FieldBody:
		return m.OldBody(ctx)
	}
	return nil, fmt.Errorf("unknown HTTPRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HTTPRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case httprequest.FieldReceived:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceived(v)
		return nil
	case httprequest.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	case httprequest.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case httprequest.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case httprequest.FieldHeader:
		v, ok := value.(http.Header)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeader(v)
		return nil
	case httprequest.FieldBody:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	}
	return fmt.Errorf("unknown HTTPRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HTTPRequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HTTPRequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HTTPRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HTTPRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HTTPRequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HTTPRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HTTPRequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HTTPRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HTTPRequestMutation) ResetField(name string) error {
	switch name {
	case httprequest.FieldReceived:
		m.ResetReceived()
		return nil
	case httprequest.FieldHost:
		m.ResetHost()
		return nil
	case httprequest.FieldPath:
		m.ResetPath()
		return nil
	case httprequest.FieldMethod:
		m.ResetMethod()
		return nil
	case httprequest.FieldHeader:
		m.ResetHeader()
		return nil
	case httprequest.FieldBody:
		m.ResetBody()
		return nil
	}
	return fmt.Errorf("unknown HTTPRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HTTPRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HTTPRequestMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HTTPRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HTTPRequestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HTTPRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HTTPRequestMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HTTPRequestMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HTTPRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HTTPRequestMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HTTPRequest edge %s", name)
}
